{"version":3,"sources":["components/BandChart.js","context/SocketContext.js","hooks/useSocket.js","components/BandAdd.js","components/BandList.js","HomePage.js","BandNamesApp.js","index.js"],"names":["myChart","SocketContext","createContext","SocketProvider","children","serverPath","socket","useMemo","io","transports","useState","online","setOnline","useEffect","connect","on","useSocket","Provider","value","BandAdd","bandName","setBandName","useContext","onSubmit","e","name","preventDefault","trim","length","emit","className","placeholder","onChange","target","BandList","bands","setBands","off","map","band","onClick","id","style","marginBottom","fontSize","event","newName","nameChanged","votes","Chart","register","registerables","BandChart","createGraph","ctx","document","getElementById","destroy","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","animation","indexAxis","scales","x","beginAtZero","HomePage","BandNamesApp","ReactDOM","render"],"mappings":"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","file":"static/js/main.1d91d755.chunk.js","sourcesContent":["import React, { useContext, useEffect } from 'react'\r\nimport { Chart, registerables } from 'chart.js'\r\nimport { SocketContext } from '../context/SocketContext'\r\n\r\nChart.register(...registerables)\r\nlet myChart\r\n\r\nexport const BandChart = () => {\r\n\r\n    const { socket } = useContext( SocketContext )\r\n\r\n    //--CHECK MESSAGE current-band FORM SOCKET\r\n    useEffect(() => {\r\n        socket.on( 'current-band', ( bands ) => {\r\n            createGraph( bands )\r\n        })\r\n    }, [ socket ])\r\n\r\n    const createGraph = ( bands= [] ) => {\r\n        const ctx = document.getElementById('myChart')\r\n        if ( typeof myChart !== \"undefined\" ) myChart.destroy()\r\n        myChart = new Chart(ctx, {\r\n            type: 'bar',\r\n            data: {\r\n                labels: bands.map( (band) => band.name ),\r\n                datasets: [{\r\n                    label: 'NÃºmero de Votos',\r\n                    data: bands.map( (band) => band.votes ),\r\n                    backgroundColor: [\r\n                        'rgba(159, 81, 182, 0.2)',\r\n                        'rgba(247, 194, 168, 0.2)',\r\n                        'rgba(240, 120, 80, 0.2)',\r\n                        'rgba(156, 221, 41, 0.2)',\r\n                        'rgba(92, 119, 243, 0.2)',\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(159, 81, 182, 1)',\r\n                        'rgba(247, 194, 168, 1)',\r\n                        'rgba(240, 120, 80, 1)',\r\n                        'rgba(156, 221, 41, 1)',\r\n                        'rgba(92, 119, 243, 1)',\r\n                    ],\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                animation: false,\r\n                indexAxis: 'y',\r\n                scales: {\r\n                    x: {\r\n                        beginAtZero: true\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <canvas id=\"myChart\" ></canvas>\r\n    )\r\n}\r\n","/*\r\n    import { SocketProvider } from './context/SocketContext'\r\n\r\n     HOW TO USE ---->\r\n        <SocketProvider serverPath={ 'http://server' }>\r\n            <App />\r\n        </SocketProvider>\r\n\r\n        App => Father Component\r\n\r\n        serverPath => path to the server were aire the Web Sockets\r\n\r\n    HOW TO CALL THE socket AND online ATTRIBUTES FROM useSocket ---->\r\n        const { socket, online } = useContext( SocketContext )\r\n\r\n        necesary to import useContext from React !!!\r\n*/\r\nimport React from 'react';\r\nimport { createContext } from \"react\";\r\nimport { useSocket } from \"../hooks/useSocket\";\r\n\r\nexport const SocketContext = createContext()\r\n\r\nexport const SocketProvider = ({ children, serverPath }) => {\r\n\r\n    const { socket, online } = useSocket( serverPath )\r\n\r\n    return (\r\n        <SocketContext.Provider value={{ socket, online }} >\r\n            { children }\r\n        </SocketContext.Provider>\r\n    )\r\n}","/*\r\n    HOW TO USE ---->\r\n        const { socket, online } = useSocket( 'https://server' )\r\n\r\n        socket => callback to use sockets\r\n\r\n        online => variable to see if the app is connected to the back or not\r\n*/\r\nimport { useEffect, useMemo, useState } from 'react'\r\nimport { io } from 'socket.io-client'\r\n\r\n//--INIT SOCKET\r\nexport const useSocket = ( serverPath ) => {\r\n    // const socket = io( 'https://socket-bandname-server.herokuapp.com/', {\r\n    // const socket = io( 'http://localhost:4000', {\r\n    const socket = useMemo( () => io( serverPath , {\r\n        transports: [ 'websocket' ]\r\n    }), [ serverPath ] )\r\n\r\n    const [ online, setOnline ] = useState( false )\r\n\r\n    //--CHECK INITIAL CONNECTION TO SOCKET\r\n    useEffect(() => {\r\n        setOnline( socket.connect() )\r\n    }, [ socket ])\r\n\r\n    //--CHECK CONNECTION TO SOCKET\r\n    useEffect(() => {\r\n        socket.on( 'connect', () => {\r\n        setOnline( true )\r\n        })\r\n    }, [ socket ])\r\n\r\n    //--CHECK DISCONNECTION TO SOCKET\r\n    useEffect(() => {\r\n        socket.on( 'disconnect', () => {\r\n        setOnline( false )\r\n        })\r\n    }, [ socket ])\r\n\r\n    return {\r\n        socket,\r\n        online\r\n    }\r\n}\r\n","import React, { useContext, useState } from 'react'\r\nimport { SocketContext } from '../context/SocketContext'\r\n\r\nexport const BandAdd = () => {\r\n\r\n    const [bandName, setBandName] = useState('')\r\n    const { socket } = useContext( SocketContext )\r\n\r\n    const addNewBand = ( name ) => {\r\n        socket.emit( 'add-new-band', {\r\n            name\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Agregar Banda</h3>\r\n            <form\r\n                onSubmit={ ( e ) => {\r\n                    e.preventDefault()\r\n                    if ( bandName.trim().length > 0 ) {\r\n                        addNewBand( bandName )\r\n                        setBandName( '' )\r\n                    }\r\n                }}\r\n            >\r\n                <input\r\n                    className=\"form-control\"\r\n                    placeholder=\"Nuevo nombre de banda\"\r\n                    value={ bandName }\r\n                    onChange={ ( e ) => {\r\n                        const name = e.target.value\r\n                        setBandName( name )\r\n                    }}\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { SocketContext } from '../context/SocketContext'\r\n\r\nimport { AiOutlinePlusCircle, AiOutlineMinusCircle } from 'react-icons/ai';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\n\r\nexport const BandList = () => {\r\n\r\n    const [bands, setBands] = useState([])\r\n    const { socket } = useContext( SocketContext )\r\n\r\n    //--CHECK MESSAGE current-band FORM SOCKET\r\n    useEffect(() => {\r\n        socket.on( 'current-band', ( bands ) => {\r\n            setBands( bands )\r\n        })\r\n        return () => socket.off( 'current-band' )\r\n    }, [ socket ])\r\n\r\n    const nameChanged = ( event, id ) => {\r\n        const newName = event.target.value\r\n        setBands( bands => bands.map( ( band ) => {\r\n            if ( band.id === id ) {\r\n                band.name = newName\r\n            }\r\n            return band\r\n        }))\r\n    }\r\n\r\n    //--SOCKET EMIT TO CHANGE THE BAND NAME\r\n    const changeBandName = ( id, name ) => {\r\n        socket.emit( 'change-band-name', {\r\n            id,\r\n            name\r\n        })\r\n    }\r\n\r\n    //--SOCKET EMIT TO VOTE THE BAND\r\n    const voteBand = ( id ) => {\r\n        socket.emit( 'vote-band', id )\r\n    }\r\n\r\n    //--SOCKET EMIT TO CANCEL THE VOTE FOR BAND\r\n    const unvoteBand = ( id ) => {\r\n        socket.emit( 'unvote-band', id )\r\n    }\r\n\r\n    //--SOCKET EMIT TO DELETE THE BAND\r\n    const deleteBand = ( id ) => {\r\n        socket.emit( 'delete-band', id )\r\n    }\r\n\r\n    const createRows = () => {\r\n        return (\r\n            bands.map( ( band ) => (\r\n                <tr key={ band.id }>\r\n                    <td>\r\n                        <button\r\n                            className=\"btn btn-dark me-2 mt-2\"\r\n                            onClick={ () => voteBand( band.id ) }\r\n                        >\r\n                            <AiOutlinePlusCircle style={{ marginBottom: '1px', fontSize: '23px' }} />\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-dark mt-2\"\r\n                            onClick={ () => unvoteBand( band.id ) }\r\n                        >\r\n                            <AiOutlineMinusCircle style={{ marginBottom: '1px', fontSize: '23px' }} />\r\n                        </button>\r\n                    </td>\r\n                    <td>\r\n                        <form\r\n                            onSubmit={ ( e ) => {\r\n                                e.preventDefault()\r\n                                changeBandName( band.id, band.name )\r\n                            }}\r\n                        >\r\n                            <input\r\n                                className=\"form-control\"\r\n                                value={ band.name }\r\n                                onChange={ ( event ) => nameChanged( event, band.id ) }\r\n                            />\r\n                        </form>\r\n                    </td>\r\n                    <td> <h3> { band.votes } </h3> </td>\r\n                    <td>\r\n                        <button\r\n                            className=\"btn btn-outline-danger\"\r\n                            onClick={ () => deleteBand( band.id ) }\r\n                        >\r\n                            <FaTrashAlt style={{ marginBottom: '5px' }} /> Borrar\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n            ))\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Bandas Actuales</h3>\r\n            <table className=\"table table-stripped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>Nombre</th>\r\n                        <th>Votos</th>\r\n                        <th>Borrar</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { createRows() }\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\nimport { SocketContext } from './context/SocketContext'\n\nimport { GrStatusGood } from 'react-icons/gr';\nimport { AiOutlineDisconnect } from 'react-icons/ai';\n\nimport { BandAdd } from './components/BandAdd'\nimport { BandList } from './components/BandList'\nimport { BandChart } from './components/BandChart'\n\nexport const HomePage = () => {\n\n  const { online } = useContext( SocketContext )\n  \n  return (\n    <div className=\"container mt-3 mb-5\">\n      <div className=\"alert\" style={{ marginBottom: '-25px' }}>\n        <p>\n          Estado del servidor: {\n            online\n              ? <span className=\"text-success\"> Online <GrStatusGood /></span>\n              : <span className=\"text-danger\"> Offline <AiOutlineDisconnect /></span>\n          }\n        </p>\n      </div>\n\n      <h1>Nombres de Bandas</h1>\n      <hr />\n\n      <div className=\"row d-flex justify-content-center\">\n        <div className=\"col-md-8\">\n          <BandChart />\n        </div>\n      </div>\n      <hr />\n\n      <div className=\"row\">\n        <div className=\"col-md-8\">\n          <BandList />\n        </div>\n        <div className=\"col-md-4\">\n          <BandAdd />\n        </div>\n      </div>\n\n    </div>\n  )\n}\n","import React from 'react'\r\nimport { SocketProvider } from './context/SocketContext'\r\nimport { HomePage } from './HomePage'\r\n\r\nexport const BandNamesApp = () => {\r\n    return (\r\n        <SocketProvider serverPath={ 'http://localhost:4000' }>\r\n            <HomePage />\r\n        </SocketProvider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BandNamesApp } from './BandNamesApp';\n\nReactDOM.render(\n  <BandNamesApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}